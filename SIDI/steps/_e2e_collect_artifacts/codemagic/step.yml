name: "[END-TO-END] Collect artifacts"
script: |
  #!/usr/bin/env bash
  # fail if any commands fails
  set -e
  if [[ "$END_TO_END_COLLECT_ARTIFACTS" != "" ]]; then
        echo "‚ÑπÔ∏è Collects results on builds: $END_TO_END_BUILD_LIST..."
        export IFS="+"

        # Sometimes the artifacts of the builds are not ready yet, so we add a timer
        echo "Retrieve from $build_slug... in 10 seconds"
        sleep 10

        # Initialize variables
        declare -a failed_builds=()
        invalid_json_count=0

        for build_slug in $END_TO_END_BUILD_LIST; do
              # Fetch info about the artifact
              END_TO_END_RESULTS_S3=$(curl -H "Content-Type: application/json" -H "x-auth-token: $CODE_MAGIC_TOKEN" --request GET "https://api.codemagic.io/builds/$build_slug" | jq '.build | .artefacts[] | select(.name == "end_to_end_results.zip") | .url' | sed 's/"//g')
              echo "‚ÑπÔ∏è Request to download artifacts: $END_TO_END_RESULTS_S3"

              if [[ "$END_TO_END_RESULTS_S3" != "" ]]; then
                    curl -L -o ./end-to-end/build/reports/"$build_slug".zip "$END_TO_END_RESULTS_S3" -H "x-auth-token:$CODE_MAGIC_TOKEN"

                    # delete .gitkeep files
                    find . -name \*.gitkeep -type f -delete
                    # unzip reports
                    echo "‚ÑπÔ∏è Contents of $build_slug.zip:"
                    unzip -l "./end-to-end/build/reports/$build_slug".zip
                    unzip -q -o "./end-to-end/build/reports/$build_slug.zip"
                    rm ./end-to-end/build/reports/"$build_slug".zip

                    # Define a function to validate JSON files
                    validate_json() {
                          local file="$1"
                          local invalid_dir="./end-to-end/build/reports/wdio-html-nice-reporter-results-invalid"
                          if ! jq empty "$file" >/dev/null 2>&1; then
                                echo "‚ö†Ô∏è Skipped invalid JSON file: $file. This may result in incomplete data in the report." 1>&2
                                mv "$file" "$invalid_dir/"
                                ((invalid_json_count++))
                                failed_builds+=("$build_slug")
                                return 1
                          fi
                          return 0
                    }

                    # Directory containing the JSON files
                    JSON_DIR="./end-to-end/build/reports/wdio-html-nice-reporter-results"

                    # Check if the directory exists and contains JSON files
                    if [[ -d "$JSON_DIR" && $(find "$JSON_DIR" -type f -name '*.json' | wc -l) -gt 0 ]]; then
                          echo "‚ÑπÔ∏è Validating JSON files in $JSON_DIR..." 1>&2
                          for file in "$JSON_DIR"/*.json; do
                                if [[ -f "$file" ]]; then
                                validate_json "$file" || echo "‚ö†Ô∏è File removed: $file due to invalid JSON." 1>&2
                                fi
                          done
                    else
                          echo "‚ö†Ô∏è Warning: No JSON files found in $JSON_DIR for $build_slug" 1>&2
                          failed_builds+=("$build_slug")
                    fi

                    # remove empty report files to avoid error
                    find ./end-to-end/build/reports/wdio-html-nice-reporter-results -type f -empty -print -delete
              else
                    echo "üö® No artifacts found for build $build_slug; something goes wrong..."
                    failed_builds+=("$build_slug")
              fi
        done

        # Calculate INVALID_BUILDS_COUNT as the size of the failed_builds array
        INVALID_BUILDS_COUNT=${#failed_builds[@]}

        # Output the failed builds and counts
        echo "Failed builds: ${failed_builds[*]}"
        echo "INVALID_JSON_COUNT=$invalid_json_count" >> $CM_ENV
        echo "INVALID_BUILDS_COUNT=$INVALID_BUILDS_COUNT" >> $CM_ENV
        echo "FAILED_BUILDS_LIST=${failed_builds[*]}" >> $CM_ENV

        # Read JSON content from the file
        res=$(jq -c --arg key "$END_TO_END_CONFIG_KEY" '.[] | select(.key == $key) | .configuration' "$END_TO_END_CONFIG_PATH")

        # Navigate to the end-to-end directory
        echo "‚ÑπÔ∏è Navigating to the end-to-end directory..."
        if ! cd ./end-to-end/; then
              echo "üö® Failed to navigate to the end-to-end directory."
              exit 1
        fi

        # After validation, proceed with merging results
        echo "‚ÑπÔ∏è Proceeding with merging results..."
        
        # Extract report_mapping_key values and ensure uniqueness
        mapping_keys=$(echo "$res" | jq -r '.execution[]?.report_mapping_key' | sort -u)

        # Add additional keys
        for additional_key in "*ios*" "*android*" "*results*"; do
              mapping_keys="$mapping_keys"$'\n'"$additional_key"
        done

        # Convert mapping_keys into an array by splitting on newlines
        IFS=$'\n' mapping_keys_array=($mapping_keys)

        # Process each key in the array
        for key in "${mapping_keys_array[@]}"; do
              echo "‚ÑπÔ∏è Processing key: $key"
              
              # Split the key into parts using '?' as the delimiter
              IFS='?' read -ra parts <<< "$key"

              for part in "${parts[@]}"; do
              # Determine the correct base path and folder name
              folder_name="${part#\*}"
              folder_name="${folder_name%\*}"
              case "$part" in
              *ios*)
                    base_path="./build/reports/wdio-html-nice-reporter-reports"
                    folder_name="ios_platform"
                    ;;
              *android*)
                    base_path="./build/reports/wdio-html-nice-reporter-reports"
                    folder_name="android_platform"
                    ;;
              *results*)
                    base_path="./build/reports/wdio-html-nice-reporter-reports"
                    folder_name="all_platforms"
                    ;;
              *)
                    base_path="./build/reports/wdio-html-nice-reporter-reports/teams"
                    ;;
              esac

              # Start processing
              echo "‚ÑπÔ∏è Starting the process of merging results..."

              # Create necessary folders
              echo "‚ÑπÔ∏è Creating directories..."
              mkdir -p "$base_path/$folder_name/" || { echo "üö® Failed to create base folder."; exit 1; }

              # Move files to the appropriate directories
              echo "‚ÑπÔ∏è Moving screenshot files..."
              mkdir -p ./build/reports/wdio-html-nice-reporter-results/temp/screenshots/ || { echo "üö® Failed to create temporary screenshot folder."; exit 1; }
              mv ./build/reports/wdio-html-nice-reporter-results/screenshots/* ./build/reports/wdio-html-nice-reporter-results/temp/screenshots/ || { echo "‚ö†Ô∏è Failed to move screenshots."; }
              
              # Merge results
              echo "‚ÑπÔ∏è Merging results using lib/scripts/mergeResults.js..."
              
              if ! node lib/scripts/mergeResults.js ./build/reports/wdio-html-nice-reporter-results/ "$part"; then
              echo "üö® Failed to merge results. Check lib/scripts/mergeResults.js script."
              exit 1
              fi

              echo "‚ÑπÔ∏è Moving merged report files..."
              if ! mv ./build/reports/wdio-html-nice-reporter-results/temp/merged-report.html "$base_path/$folder_name/merged-report.html"; then
              echo "üö® Failed to move wdio-html-nice-reporter-results/temp/merged-report.html"
              exit 1
              fi

              if ! mv ./build/reports/wdio-html-nice-reporter-results/temp/merged-report-no-screenshots.html "$base_path/$folder_name/merged-report-no-screenshots.html"; then
              echo "üö® Failed to move wdio-html-nice-reporter-results/temp/merged-report-no-screenshots.html"
              exit 1
              fi

              if ! mv ./build/reports/wdio-html-nice-reporter-results/temp/merged-report.json "$base_path/$folder_name/merged-report.json"; then
              echo "üö® Failed to move wdio-html-nice-reporter-results/temp/merged-report.json"
              exit 1
              fi

              if ! mv ./build/reports/wdio-html-nice-reporter-results/temp/glyphicons-halflings-regular.woff "$base_path/$folder_name/glyphicons-halflings-regular.woff"; then
              echo "üö® Failed to move wdio-html-nice-reporter-results/temp/glyphicons-halflings-regular.woff"
              exit 1
              fi

              if ! mv ./build/reports/wdio-html-nice-reporter-results/temp/report-styles.css "$base_path/$folder_name/report-styles.css"; then
              echo "üö® Failed to move wdio-html-nice-reporter-results/temp/report-styles.css"
              exit 1
              fi

              if ! mv ./build/reports/wdio-html-nice-reporter-results/temp/master-report.pdf "$base_path/$folder_name/master-report.pdf"; then
                    echo "üö® Failed to move wdio-html-nice-reporter-results/temp/master-report.pdf"
                    exit 1
              fi

              if ! mv ./build/reports/wdio-html-nice-reporter-results/temp/master-report-no-screenshots.pdf "$base_path/$folder_name/master-report-no-screenshots.pdf"; then
                    echo "üö® Failed to move wdio-html-nice-reporter-results/temp/master-report-no-screenshots.pdf"
                    exit 1
              fi

              # Generate date-based report filenames
              echo "‚ÑπÔ∏è Generating date-based filenames for reports..."
              current_date=$(date +'%d-%m-%Y')

              if ! mv "$base_path/$folder_name/merged-report.html" "$base_path/$folder_name/$current_date.html"; then
              echo "üö® Failed to rename $base_path/$folder_name/merged-report.html"
              exit 1
              fi

              if ! mv "$base_path/$folder_name/merged-report-no-screenshots.html" "$base_path/$folder_name/$current_date-no-screenshots.html"; then
              echo "üö® Failed to rename $base_path/$folder_name/merged-report-no-screenshots.html"
              exit 1
              fi

              if ! mv "$base_path/$folder_name/master-report.pdf" "$base_path/$folder_name/$current_date.pdf"; then
              echo "üö® Failed to rename $base_path/$folder_name/master-report.pdf"
              exit 1
              fi

              if ! mv "$base_path/$folder_name/master-report-no-screenshots.pdf" "$base_path/$folder_name/$current_date-no-screenshots.pdf"; then
              echo "üö® Failed to rename $base_path/$folder_name/master-report-no-screenshots.pdf"
              exit 1
              fi

              # Clean up temporary directory
              echo "‚ÑπÔ∏è Cleaning up temporary files..."
              mv ./build/reports/wdio-html-nice-reporter-results/temp/screenshots/* ./build/reports/wdio-html-nice-reporter-results/screenshots/ || { echo "‚ö†Ô∏è Failed to move screenshots."; }
              rm -rf ./build/reports/wdio-html-nice-reporter-results/temp/ || { echo "üö® Failed to clean up temporary files."; exit 1; }

              echo "‚ÑπÔ∏è Process completed successfully!"
              done
        done

        if [[ $INVALID_JSON_COUNT -gt 0 ]]; then
              echo "‚ö†Ô∏è Number of invalid JSON files: $INVALID_JSON_COUNT"
        else
              echo "‚ÑπÔ∏è No invalid JSON reported"
        fi

        if [[ $INVALID_BUILDS_COUNT -gt 0 ]]; then
              echo "‚ö†Ô∏è Number of invalid builds: $INVALID_BUILDS_COUNT"
              echo "‚ö†Ô∏è Failed builds: ${failed_builds[*]}"
        else
              echo "‚ÑπÔ∏è No invalid build(s) reported"
        fi

        echo "‚úÖ Console reports generated successfully"

        echo "‚ÑπÔ∏è Zip reports..."
        find ./build/reports/wdio-html-nice-reporter-reports/ -type f ! \( -name "*.html" -o -name "*.pdf" \) | zip -q -@ $CM_EXPORT_DIR/json-wdio-html-nice-reporter-reports.zip
        
        find ./build/reports/wdio-html-nice-reporter-reports/ -type f -name "*-no-screenshots.pdf" | zip -q -@ $CM_EXPORT_DIR/_all-reports-PDF-no-screenshots.zip
        find ./build/reports/wdio-html-nice-reporter-reports/ -type f -name "*-no-screenshots.html" | zip -q -@ $CM_EXPORT_DIR/_all-reports-HTML-no-screenshots.zip

        find ./build/reports/wdio-html-nice-reporter-reports/ -type f -name "*.pdf" ! -name "*-no-screenshots*.pdf" | zip -q -@ $CM_EXPORT_DIR/_all-reports-PDF.zip
        find ./build/reports/wdio-html-nice-reporter-reports/ -type f -name "*.html" ! -name "*-no-screenshots*.html" | zip -q -@ $CM_EXPORT_DIR/_all-reports-HTML.zip

        find ./build/reports/wdio-html-nice-reporter-results/ -type f | zip -q -@ $CM_EXPORT_DIR/_wdio-html-nice-reporter-results.zip

        # Define the target directory
        target_dir="./build/reports/wdio-html-nice-reporter-reports/teams"

        # Check if the directory exists
        if [ ! -d "$target_dir" ]; then
              echo "‚ùå Directory $target_dir does not exist. Exiting."
              exit 0
        fi

        # Check if the directory contains any subdirectories
        if [ -z "$(find "$target_dir" -mindepth 1 -type d)" ]; then
              echo "‚ÑπÔ∏è Directory $target_dir is empty or contains no subdirectories. Skipping zip process."
              exit 0
        fi

        echo "‚ÑπÔ∏è Directory $target_dir contains subdirectories. Proceeding with zipping..."

        # Navigate to the directory
        cd "$target_dir" || exit

        # Iterate over each folder inside the target directory
        for folder in */; do
              # Remove the trailing slash for the folder name
              folder_name=$(basename "$folder")
              
              # Define the zip file name in the export directory
              zip_name="teams_${folder_name}.zip"
              
              echo "‚ÑπÔ∏è Creating zip for folder per team: $folder_name -> $zip_name"
              
              # Find .pdf files that do not contain "-no-screenshots" and add them to the zip
              find "$folder" -type f -name "*.pdf" ! -name "*-no-screenshots*" | zip -q -@ "$CM_EXPORT_DIR/$zip_name"
        done 

        echo "‚úÖ Zip files created successfully in $CM_EXPORT_DIR."

  fi