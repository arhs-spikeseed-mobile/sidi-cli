name: "[END-TO-END] Collect artifacts"
script: |
  #!/usr/bin/env bash
  # fail if any commands fail
  set -ex

  if [[ "$END_TO_END_COLLECT_ARTIFACTS" != "" ]]; then
    echo "‚ÑπÔ∏è Collects results on builds: $END_TO_END_BUILD_LIST..."
    export IFS="+"

    # Sometimes the artifacts of the builds are not ready yet, so we add a timer
    echo "Retrieve from $build_slug... in 10 seconds"
    sleep 10

    # Counter for invalid JSON files
    invalid_json_count=0
    invalid_builds_count=0

    for build_slug in $END_TO_END_BUILD_LIST; do
      # Fetch info about the artifact
      END_TO_END_RESULTS_S3=$(curl -H "Content-Type: application/json" -H "x-auth-token: $CODE_MAGIC_TOKEN" --request GET "https://api.codemagic.io/builds/$build_slug" | jq '.build | .artefacts[] | select(.name == "end_to_end_results.zip") | .url' | sed 's/"//g')
      echo "‚ÑπÔ∏è Request to download artifacts: $END_TO_END_RESULTS_S3"

      if [[ "$END_TO_END_RESULTS_S3" != "" ]]; then
        curl -L -o ./end-to-end/build/reports/"$build_slug".zip "$END_TO_END_RESULTS_S3" -H "x-auth-token:$CODE_MAGIC_TOKEN"

        # delete .gitkeep files
        find . -name \*.gitkeep -type f -delete

        # unzip reports
        echo "‚ÑπÔ∏è Contents of $build_slug.zip:"
        unzip -l "./end-to-end/build/reports/$build_slug".zip
        unzip -q -o "./end-to-end/build/reports/$build_slug.zip"
        rm ./end-to-end/build/reports/"$build_slug".zip

        # Validate JSON files
        validate_json() {
          local file="$1"
          local invalid_dir="./end-to-end/build/reports/wdio-html-nice-reporter-results-invalid"
          if ! jq empty "$file" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Skipped invalid JSON file: $file. This may result in incomplete data in the report." 1>&2
            mv "$file" "$invalid_dir/"
            ((invalid_json_count++))
            return 1
          fi
          return 0
        }

        # Directory containing the JSON files
        JSON_DIR="./end-to-end/build/reports/wdio-html-nice-reporter-results"

        if [[ -d "$JSON_DIR" && $(find "$JSON_DIR" -type f -name '*.json' | wc -l) -gt 0 ]]; then
          echo "‚ÑπÔ∏è Validating JSON files in $JSON_DIR..." 1>&2
          for file in "$JSON_DIR"/*.json; do
            if [[ -f "$file" ]]; then
              validate_json "$file" || echo "‚ö†Ô∏è File removed: $file due to invalid JSON." 1>&2
            fi
          done
        else
          echo "‚ö†Ô∏è Warning: No JSON files found in $JSON_DIR." 1>&2
          ((invalid_builds_count++))
        fi

        find ./end-to-end/build/reports/wdio-html-nice-reporter-results -type f -empty -print -delete
      else
        echo "üö® No artifacts found for build $build_slug; something goes wrong..."
        ((invalid_builds_count++))
      fi
    done

    echo "INVALID_JSON_COUNT=$invalid_json_count" >> $CM_ENV
    echo "INVALID_BUILDS_COUNT=$invalid_builds_count" >> $CM_ENV

    res=$(jq -c --arg key "$END_TO_END_CONFIG_KEY" '.[] | select(.config_name == $key) | .config_content' "$END_TO_END_CONFIG_PATH")

    echo "‚ÑπÔ∏è Navigating to the end-to-end directory..."
    if ! cd ./end-to-end/; then
      echo "üö® Failed to navigate to the end-to-end directory."
      exit 1
    fi

    echo "‚ÑπÔ∏è Proceeding with merging results..."
    mapping_keys=$(echo "$res" | jq -r '.config[]?.report_mapping_key' | sort -u)

    for additional_key in "*ios*" "*android*" "*results*"; do
      mapping_keys="$mapping_keys"$'\n'"$additional_key"
    done

    IFS=$'\n' mapping_keys_array=($mapping_keys)

    for key in "${mapping_keys_array[@]}"; do
      echo "‚ÑπÔ∏è Processing key: $key"
      
      IFS='?' read -ra parts <<< "$key"

      for part in "${parts[@]}"; do
        folder_name="${part#\*}"
        folder_name="${folder_name%\*}"
        case "$part" in
          *ios*)
            base_path="./build/reports/wdio-html-nice-reporter-reports"
            folder_name="ios_platform"
            ;;
          *android*)
            base_path="./build/reports/wdio-html-nice-reporter-reports"
            folder_name="android_platform"
            ;;
          *results*)
            base_path="./build/reports/wdio-html-nice-reporter-reports"
            folder_name="all_platforms"
            ;;
          *)
            base_path="./build/reports/wdio-html-nice-reporter-reports/teams"
            ;;
        esac

        mkdir -p "$base_path/$folder_name/" || { echo "üö® Failed to create base folder."; exit 1; }
        mkdir -p ./build/reports/wdio-html-nice-reporter-results/temp/screenshots/ || { echo "üö® Failed to create temporary screenshot folder."; exit 1; }

        if ! node lib/scripts/mergeResults.js ./build/reports/wdio-html-nice-reporter-results/ "$part"; then
          echo "üö® Failed to merge results. Check lib/scripts/mergeResults.js script."
          exit 1
        fi

        mv ./build/reports/wdio-html-nice-reporter-results/screenshots/* ./build/reports/wdio-html-nice-reporter-results/temp/screenshots/ || { echo "‚ö†Ô∏è Failed to move screenshots."; }

        mv ./build/reports/wdio-html-nice-reporter-results/temp/merged-report.html "$base_path/$folder_name/merged-report.html" || exit 1
        mv ./build/reports/wdio-html-nice-reporter-results/temp/merged-report.json "$base_path/$folder_name/merged-report.json" || exit 1

        current_date=$(date +'%d-%m-%Y')
        mv "$base_path/$folder_name/merged-report.html" "$base_path/$folder_name/$current_date.html" || exit 1

        rm -rf ./build/reports/wdio-html-nice-reporter-results/temp/ || exit 1
      done
    done

    if [[ $INVALID_JSON_COUNT -gt 0 ]]; then
      echo "‚ö†Ô∏è Number of invalid JSON files: $INVALID_JSON_COUNT"
    else
      echo "‚ÑπÔ∏è No invalid JSON reported"
    fi

    if [[ $INVALID_BUILDS_COUNT -gt 0 ]]; then
      echo "‚ö†Ô∏è Number of invalid builds: $INVALID_BUILDS_COUNT"
    else
      echo "‚ÑπÔ∏è No invalid build(s) reported"
    fi

    echo "‚úÖ Console reports generated successfully"

    zip -q -r $CM_EXPORT_DIR/source_end_to_end_results.zip ./build/*
    zip -q -r $CM_EXPORT_DIR/wdio-html-nice-reporter-reports.zip ./build/reports/wdio-html-nice-reporter-reports/*
    cd ../
  fi
