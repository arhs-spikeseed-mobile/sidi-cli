name: "[END-TO-END] Trigger E2E sessions"
script: |
  #!/usr/bin/env bash
  # fail if any commands fails

  # Avoid usage of run_if
  if [ "$RETRIGGER_WAITING_PREVIOUS_BUILDS" == "true" ]
        then
        echo "Waiting builds to trigger new ones..."
        exit 0
  fi

  # Reset builds number to avoid collision
  IOS_BUILD_SLUG_1="EMPTY"
  IOS_BUILD_SLUG_2="EMPTY"
  IOS_BUILD_SLUG_3="EMPTY"
  ANDROID_BUILD_SLUG_1="EMPTY"
  ANDROID_BUILD_SLUG_2="EMPTY"
  ANDROID_BUILD_SLUG_3="EMPTY"

  echo "IOS_BUILD_SLUG_1=$IOS_BUILD_SLUG_1" >> $CM_ENV
  echo "IOS_BUILD_SLUG_2=$IOS_BUILD_SLUG_2" >> $CM_ENV
  echo "IOS_BUILD_SLUG_3=$IOS_BUILD_SLUG_3" >> $CM_ENV
  echo "ANDROID_BUILD_SLUG_1=$ANDROID_BUILD_SLUG_1" >> $CM_ENV
  echo "ANDROID_BUILD_SLUG_2=$ANDROID_BUILD_SLUG_2" >> $CM_ENV
  echo "ANDROID_BUILD_SLUG_3=$ANDROID_BUILD_SLUG_3" >> $CM_ENV

  RUN_END_TO_END="true"
  echo "RUN_END_TO_END=$RUN_END_TO_END" >> $CM_ENV

  SIDI_TRAIN="canary"
  echo "SIDI_TRAIN=$SIDI_TRAIN" >> $CM_ENV

  if [ "$END_TO_END_BUILD_LIST_INDEX" != "" ]
        then
              previous_index=$END_TO_END_BUILD_LIST_INDEX
              ((previous_index=previous_index+1))
  else
        previous_index=1
  fi

  res=$(jq -c --arg key "$END_TO_END_CONFIG_KEY" '.[] | select(.config_name == $key) | .config_content' "$END_TO_END_CONFIG_PATH")
  max_index=$(echo "$res" | jq '.config | length')
  ((max_index=max_index+1))

  # Check first where we are in the loop and if it's over
  if [ $max_index -le $previous_index ]
        then
              # We have executed all E2E specs, we can now try to fetch all reports
              echo "All sessions has been executed!"
              END_TO_END_COLLECT_ARTIFACTS="true"
              echo "END_TO_END_COLLECT_ARTIFACTS=$END_TO_END_COLLECT_ARTIFACTS" >> $CM_ENV
  else
        res=$(jq -c --arg key "$END_TO_END_CONFIG_KEY" '.[] | select(.config_name == $key) | .config_content' "$END_TO_END_CONFIG_PATH")
        export last_index=1
        loop_index=1

        # Set path to wdio config files
        WDIO_CONFIG_PATH_IOS="$(echo "$res" | jq -c -r '.config_path_ios')"
        echo "WDIO_CONFIG_PATH_IOS=$WDIO_CONFIG_PATH_IOS" >> $CM_ENV
        WDIO_CONFIG_PATH_ANDROID="$(echo "$res" | jq -c -r '.config_path_android')"
        echo "WDIO_CONFIG_PATH_ANDROID=$WDIO_CONFIG_PATH_ANDROID" >> $CM_ENV

        # Navigate to the end-to-end directory
        echo "‚ÑπÔ∏è Navigating to the end-to-end directory..."
        if ! cd ./end-to-end/; then
          echo "üö® Failed to navigate to the end-to-end directory."
          exit 1
        fi
        chmod u+x "$WDIO_CONFIG_PATH_IOS"
        chmod u+x "$WDIO_CONFIG_PATH_ANDROID"

        # Parse json files
        echo "$res" | jq -c -r '.config_path_android'
        echo "$res" | jq -c -r '.config[]' | while read item;
        do
              # Load right config based on the index
              if [ $previous_index -le $loop_index ]
                    then
                                report_name=$(jq -r '.report_name' <<< "$item")
                                specs=$(jq -r '.specs' <<< "$item")


                                # Spreak work across multiple jobs
                                if [ "$WDIO_CONFIG_1_REPORT_NAME" == "" ]
                                      then
                                            WDIO_CONFIG_1_REPORT_NAME="$report_name"
                                            echo "WDIO_CONFIG_1_REPORT_NAME=$WDIO_CONFIG_1_REPORT_NAME" >> $CM_ENV
                                            WDIO_CONFIG_1_SPECS_NAME="$specs"
                                            echo "WDIO_CONFIG_1_SPECS_NAME=$WDIO_CONFIG_1_SPECS_NAME" >> $CM_ENV

                                            echo "CONFIG_1:$loop_index"
                                            echo "report_name: $WDIO_CONFIG_1_REPORT_NAME"
                                            echo "specs: $specs"

                                            last_index="$loop_index"
                                            echo "last_index=$last_index" >> $CM_ENV
                                elif [ "$WDIO_CONFIG_2_REPORT_NAME" == "" ]
                                      then
                                            WDIO_CONFIG_2_REPORT_NAME="$report_name"
                                            echo "WDIO_CONFIG_2_REPORT_NAME=$WDIO_CONFIG_2_REPORT_NAME" >> $CM_ENV
                                            WDIO_CONFIG_2_SPECS_NAME="$specs"
                                            echo "WDIO_CONFIG_2_SPECS_NAME=$WDIO_CONFIG_2_SPECS_NAME" >> $CM_ENV

                                            echo "CONFIG_2:$loop_index"
                                            echo "report_name: $WDIO_CONFIG_2_REPORT_NAME"
                                            echo "specs: $specs"

                                            last_index="$loop_index"
                                            echo "last_index=$last_index" >> $CM_ENV
                                elif [ "$WDIO_CONFIG_3_REPORT_NAME" == "" ]
                                      then
                                            WDIO_CONFIG_3_REPORT_NAME="$report_name"
                                            echo "WDIO_CONFIG_3_REPORT_NAME=$WDIO_CONFIG_3_REPORT_NAME" >> $CM_ENV
                                            WDIO_CONFIG_3_SPECS_NAME="$specs"
                                            echo "WDIO_CONFIG_3_SPECS_NAME=$WDIO_CONFIG_3_SPECS_NAME" >> $CM_ENV

                                            echo "CONFIG_3:$loop_index"
                                            echo "report_name: $WDIO_CONFIG_3_REPORT_NAME"
                                            echo "specs: $specs"

                                            last_index="$loop_index"
                                            echo "last_index=$last_index" >> $CM_ENV
                                fi
              fi
              ((loop_index=loop_index+1))
              #share last_index to the next job
              END_TO_END_BUILD_LIST_INDEX="$last_index"
              echo "END_TO_END_BUILD_LIST_INDEX=$END_TO_END_BUILD_LIST_INDEX" >> $CM_ENV
        done
  fi
